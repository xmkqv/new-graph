// This file is auto-generated by @hey-api/openapi-ts

export type AskRequest = Array<Message>;

export type Bbox = {
    x: (number);
    y: (number);
    w: (number);
    h: (number);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type LayoutRequest = {
    nids: Array<(string)>;
    eids: Array<[
        string,
        string
    ]>;
    layout: 'auto' | 'bipartite' | 'circle' | 'circular' | 'davidson_harel' | 'drl' | 'drl_3d' | 'fruchterman_reingold' | 'fr' | 'fruchterman_reingold_3d' | 'fr_3d' | 'fr3d' | 'grid' | 'grid_3d' | 'graphopt' | 'kamada_kawai' | 'kk' | 'kamada_kawai_3d' | 'kk_3d' | 'kk3d' | 'lgl' | 'large' | 'large_graph' | 'mds' | 'random' | 'random_3d' | 'reingold_tilford' | 'rt' | 'tree' | 'reingold_tilford_circular' | 'rt_circular' | 'sphere' | 'spherical' | 'circle_3d' | 'circular_3d' | 'star' | 'sugiyama';
    bbox: Bbox;
};

export type layout = 'auto' | 'bipartite' | 'circle' | 'circular' | 'davidson_harel' | 'drl' | 'drl_3d' | 'fruchterman_reingold' | 'fr' | 'fruchterman_reingold_3d' | 'fr_3d' | 'fr3d' | 'grid' | 'grid_3d' | 'graphopt' | 'kamada_kawai' | 'kk' | 'kamada_kawai_3d' | 'kk_3d' | 'kk3d' | 'lgl' | 'large' | 'large_graph' | 'mds' | 'random' | 'random_3d' | 'reingold_tilford' | 'rt' | 'tree' | 'reingold_tilford_circular' | 'rt_circular' | 'sphere' | 'spherical' | 'circle_3d' | 'circular_3d' | 'star' | 'sugiyama';

export type Message = {
    role: string;
    content: string;
};

export type NodeXy = {
    id: string;
    v: Array<(number)>;
};

export type SquarifyRequest = {
    areas: Array<(number)>;
    bbox: Bbox;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type PingPingGetResponse = (unknown);

export type PingPingGetError = unknown;

export type AskAskPostData = {
    body: AskRequest;
};

export type AskAskPostResponse = (Message);

export type AskAskPostError = (HTTPValidationError);

export type LayoutLayoutPostData = {
    body: LayoutRequest;
};

export type LayoutLayoutPostResponse = (Array<NodeXy>);

export type LayoutLayoutPostError = (HTTPValidationError);

export type SquarifySquarifyPostData = {
    body: SquarifyRequest;
};

export type SquarifySquarifyPostResponse = (unknown);

export type SquarifySquarifyPostError = (HTTPValidationError);