// This file is auto-generated by @hey-api/openapi-ts

export const AskRequestSchema = {
    items: {
        '$ref': '#/components/schemas/Message'
    },
    type: 'array',
    title: 'AskRequest'
} as const;

export const BboxSchema = {
    properties: {
        x: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'number'
                }
            ],
            title: 'X'
        },
        y: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'number'
                }
            ],
            title: 'Y'
        },
        w: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'number'
                }
            ],
            title: 'W'
        },
        h: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'number'
                }
            ],
            title: 'H'
        }
    },
    type: 'object',
    required: ['x', 'y', 'w', 'h'],
    title: 'Bbox'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const LayoutRequestSchema = {
    properties: {
        nids: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Nids'
        },
        eids: {
            items: {
                prefixItems: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'string'
                    }
                ],
                type: 'array',
                maxItems: 2,
                minItems: 2
            },
            type: 'array',
            title: 'Eids'
        },
        layout: {
            type: 'string',
            enum: ['auto', 'bipartite', 'circle', 'circular', 'davidson_harel', 'drl', 'drl_3d', 'fruchterman_reingold', 'fr', 'fruchterman_reingold_3d', 'fr_3d', 'fr3d', 'grid', 'grid_3d', 'graphopt', 'kamada_kawai', 'kk', 'kamada_kawai_3d', 'kk_3d', 'kk3d', 'lgl', 'large', 'large_graph', 'mds', 'random', 'random_3d', 'reingold_tilford', 'rt', 'tree', 'reingold_tilford_circular', 'rt_circular', 'sphere', 'spherical', 'circle_3d', 'circular_3d', 'star', 'sugiyama'],
            title: 'Layout'
        },
        bbox: {
            '$ref': '#/components/schemas/Bbox'
        }
    },
    type: 'object',
    required: ['nids', 'eids', 'layout', 'bbox'],
    title: 'LayoutRequest'
} as const;

export const MessageSchema = {
    properties: {
        role: {
            type: 'string',
            title: 'Role'
        },
        content: {
            type: 'string',
            title: 'Content'
        }
    },
    type: 'object',
    required: ['role', 'content'],
    title: 'Message'
} as const;

export const NodeXySchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        v: {
            items: {
                anyOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'number'
                    }
                ]
            },
            type: 'array',
            title: 'V'
        }
    },
    type: 'object',
    required: ['id', 'v'],
    title: 'NodeXy'
} as const;

export const SquarifyRequestSchema = {
    properties: {
        areas: {
            items: {
                anyOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'number'
                    }
                ]
            },
            type: 'array',
            title: 'Areas'
        },
        bbox: {
            '$ref': '#/components/schemas/Bbox'
        }
    },
    type: 'object',
    required: ['areas', 'bbox'],
    title: 'SquarifyRequest'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;